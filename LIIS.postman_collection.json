{
	"info": {
		"_postman_id": "49a9ad74-0b72-4b88-9f33-05f1738de554",
		"name": "LIIS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24684736"
	},
	"item": [
		{
			"name": "LIIS Test v.1",
			"item": [
				{
					"name": "Posts",
					"item": [
						{
							"name": "Get posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"     pm.test(\"New post created. Status code is 201.\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 422){\r",
											"    pm.test(\"Status code is 422. Invalid input type.\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Invalid input type.\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"pm.test(\"Check 'title' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"title\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'content' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"content\").and.to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "gand2ry",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"gleb\",\n    \"content\": \"gleb\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200){\r",
											"     pm.test(\"OK. Status code is 200.\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Post not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Post not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/post/11843",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"post",
										"11843"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /\\/(\\d+)$/;\r",
											"const match = pm.request.url.getPath().match(regex);\r",
											"const id = match && match[1];\r",
											"\r",
											"\r",
											"if (pm.response.code == 200){\r",
											"     pm.test(`Post with id ${id} was updated. Status code is 200.`, function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 403){\r",
											"    pm.test(\"Forbidden\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Forbidden\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Post not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Post not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check 'title' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"title\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'content' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"content\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "gand2ry",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Hello\",\n    \"content\": \"World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/post/11898",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"post",
										"11898"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /\\/(\\d+)$/;\r",
											"const match = pm.request.url.getPath().match(regex);\r",
											"const id = match && match[1];\r",
											"\r",
											"\r",
											"if (pm.response.code == 204){\r",
											"     pm.test(`Post with id ${id} was deleted. Status code is 204.`, function () {\r",
											"            pm.response.to.have.status(204);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 403){\r",
											"    pm.test(\"Forbidden\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Forbidden\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Post not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Comment not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/post/1409",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"post",
										"1409"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Get comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"     pm.test(\"New comment created. Status code is 201.\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Post not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Post not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 422){\r",
											"    pm.test(\"Status code is 422. Invalid input type.\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Invalid input type.\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Check 'title' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"title\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'content' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"content\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'post' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"post\").and.to.be.a(\"number\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "gand2ry",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Я залогинен как gand2ry\",\n    \"content\": \"Хочу прокомментировать пост юзера gand2ry\",\n    \"post\": 11843\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200){\r",
											"     pm.test(\"OK. Status code is 200.\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Comment not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Comment not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/comment/33",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"comment",
										"33"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /\\/(\\d+)$/;\r",
											"const match = pm.request.url.getPath().match(regex);\r",
											"const id = match && match[1];\r",
											"\r",
											"\r",
											"if (pm.response.code == 200){\r",
											"     pm.test(`Comment with id ${id} was updated. Status code is 200.`, function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 403){\r",
											"    pm.test(\"Forbidden\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Forbidden\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Comment not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Comment not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Check 'title' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"title\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'content' field\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    pm.expect(requestBody).to.have.property(\"content\").and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "gand2ry",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Я залогинен как gand2ry\",\n    \"content\": \"хочу изменить коммент юзера ruby 3339\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/comment/3339",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"comment",
										"3339"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /\\/(\\d+)$/;\r",
											"const match = pm.request.url.getPath().match(regex);\r",
											"const id = match && match[1];\r",
											"\r",
											"\r",
											"if (pm.response.code == 204){\r",
											"     pm.test(`Comment with id ${id} was deleted. Status code is 204.`, function () {\r",
											"            pm.response.to.have.status(204);\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 401){\r",
											"    pm.test(\"Status code is 401. Could not verify your login!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Could not verify your login!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"else if (pm.response.code == 403){\r",
											"    pm.test(\"Forbidden\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Forbidden\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											"\r",
											"else if (pm.response.code == 404){\r",
											"    pm.test(\"Status code is 404. Comment not found!\", function () {\r",
											"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
											"            message: \"Comment not found!\",\r",
											"            type: \"error\"\r",
											"            });\r",
											"        });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/comment/3340",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"gand2ry",
										"comment",
										"3340"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201){\r",
									"     pm.test(\"Status code is 201. Sign In - Successful\", function () {\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									"}\r",
									"\r",
									"\r",
									"else if (pm.response.code == 409){\r",
									"    pm.test(\"Status code is 409. User with this username or email already exists\", function () {\r",
									"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
									"            message: \"User with this username or email already exists\",\r",
									"            type: \"error\"\r",
									"            });\r",
									"        });\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check 'username' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"username\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'email' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"email\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'password' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"password\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check email field validation\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const email = requestBody.email;\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const isValidEmail = emailRegex.test(email);\r",
									"\r",
									"    pm.expect(isValidEmail).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gand2ry\",\n    \"email\": \"gand2ry@gmail.com\",\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://hr.recruit.liis.su/qa0/v1/api/gand2ry/sign-in",
							"protocol": "https",
							"host": [
								"hr",
								"recruit",
								"liis",
								"su"
							],
							"path": [
								"qa0",
								"v1",
								"api",
								"gand2ry",
								"sign-in"
							]
						},
						"description": "Required fields: username, email, password"
					},
					"response": []
				}
			]
		},
		{
			"name": "LIIS Test v.2",
			"item": [
				{
					"name": "Posts",
					"item": [
						{
							"name": "Get posts pagination",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/gand2ry/posts?page=1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"gand2ry",
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/gand2ry/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"gand2ry",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post post",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"postname\",\n    \"content\": \"postcontent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/post/1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"post",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"yournewpostname\",\n    \"content\": \"yournewpostcontent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/post/1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"post",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/post/1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"post",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Post comment",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"text\": \"yourcommenttext\",\n    \"post\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comment/1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comment",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourdsadsadsafname\",\n    \"text\": \"yournewpfasdsadasdsadsadontent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comment/21",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comment",
										"21"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comments?page=1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/comment/1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"<tester>",
										"comment",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201){\r",
									"     pm.test(\"Status code is 201. Sign In - Successful\", function () {\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									"}\r",
									"\r",
									"\r",
									"else if (pm.response.code == 409){\r",
									"    pm.test(\"Status code is 409. User with this username or email already exists\", function () {\r",
									"            pm.expect.fail(pm.response.json()).to.deep.include({\r",
									"            message: \"User with this username or email already exists\",\r",
									"            type: \"error\"\r",
									"            });\r",
									"        });\r",
									"}\r",
									"\r",
									"pm.test(\"Check 'username' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"username\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'email' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"email\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'password' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"password\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'first_name' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"first_name\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'middle_name' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"middle_name\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'last_name' field\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).to.have.property(\"last_name\").and.to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check email field validation\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const email = requestBody.email;\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const isValidEmail = emailRegex.test(email);\r",
									"\r",
									"    pm.expect(isValidEmail).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gand2ry\",\n    \"email\": \"gand2ry@gmail.com\",\n    \"password\": \"123\",\n    \"first_name\": \"gand2ry\",\n    \"middle_name\": \"gand2ry\",\n    \"last_name\": \"gand2ry\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://hr.recruit.liis.su/qa0/v2/api/gand2ry/sign-in",
							"protocol": "https",
							"host": [
								"hr",
								"recruit",
								"liis",
								"su"
							],
							"path": [
								"qa0",
								"v2",
								"api",
								"gand2ry",
								"sign-in"
							]
						},
						"description": "Required fields: username, email, password.\nOptional fields: first_name, middle_name, last_name."
					},
					"response": []
				},
				{
					"name": "Grant user admin role",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1115130\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://hr.recruit.liis.su/qa0/v2/api/<tester>/make_admin",
							"protocol": "https",
							"host": [
								"hr",
								"recruit",
								"liis",
								"su"
							],
							"path": [
								"qa0",
								"v2",
								"api",
								"<tester>",
								"make_admin"
							]
						},
						"description": "Grant user admin role so that he can put and delete foreign entities."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": "gand2ry@gmail.com",
			"type": "string"
		},
		{
			"key": "tester",
			"value": "6994",
			"type": "string"
		}
	]
}